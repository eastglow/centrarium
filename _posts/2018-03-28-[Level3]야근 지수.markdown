---
layout: post
title:  "[Level3]야근 지수"
date:   2018-03-28 20:40:00
author: EastGlow
categories: 1일1알
---
## 문제
```
야근 지수  
회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 메기고, 일에 대한 야근 지수를 줄이기로 결정했습니다.  
야근 지수는 남은 일의 작업량을 제곱하여 더한 값을 의미합니다. 수민이는 1시간 동안 남은 일 중 하나를 골라 작업량 1만큼 처리할 수 있습니다.  
수민이의 퇴근까지 남은 N 시간과 각 일에 대한 작업량이 있을 때, noOvertime 함수를 제작하여 수민이의 야근 지수를 최소화 한 결과를 출력해 주세요.  
예를 들어, N=4 일 때, 남은 일의 작업량이 [4, 3, 3] 이라면 야근 지수를 최소화하기 위해 일을 한 결과는 [2, 2, 2]가 되고 야근 지수는 22 + 22 + 22 = 12가 되어 12를 반환해 줍니다.
```

## 풀이 1
~~~
import java.util.*;

class NoOvertime {
    public int noOvertime(int no, int[] works) {
        int result = 0;
        // 야근 지수를 최소화 하였을 때의 야근 지수는 몇일까요?

        for(int i=0; i<no; ++i){
            Arrays.sort(works);
            works[works.length-1] -= 1;
        }

        for(int j=0; j<works.length; ++j){
        	result += works[j]*works[j];
        }

    return result;
}

    public static void main(String[] args) {
        NoOvertime c = new NoOvertime();
        int []test = {4,3,3};
        System.out.println(c.noOvertime(4,test));
    }
}
~~~
처음에 문제를 읽고 어떻게 구현할 지에 대해 생각하느라 좀 시간을 보낸 문제이다. 결과적으론 주어진 배열에서 제일 큰 수를 찾아 -1을 계속 해주면 결국엔 그 배열이 최소값이 되는 것이었다. 배열을 정렬하여 최소값(오름차순 정렬이므로 배열의 맨 끝 값)을 찾아서 -1을 해준다. 주어진 시간(no)만큼 for문이 다 돌면 최종적으로 배열 안의 수들을 제곱하여 더해준다.