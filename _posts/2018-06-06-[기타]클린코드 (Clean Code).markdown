---
layout: post
title:  "[기타]클린코드 (Clean Code)"
date:   2018-06-06 16:22:00
author: EastGlow
categories: 기타
---

## Chapter 1. 깨끗한 코드

### 코드가 존재하리라

- 코드는 요구사항을 상세히 표현하는 수단
- 프로그래밍은 기계가 실행할 정도로 상세하게 요구사항을 명시하는 작업

### 나쁜 코드

- 좋은 코드는 중요하다
- 나쁜 코드는 프로그램, 나아가 회사를 망하게 할 수도 있다.
- 급해서... 서두르느라... 제대로 짤 시간이 없어서... 코드를 다듬느라 상사에게 욕 먹을까봐... 지겨워서... 다른 업무가 밀려서...

> 일단 나쁜 코드를 짜놓고 나중에 정리하겠다고 다짐하는 것은 옳지 않다. 나중은 결코 오지 않는다. (르블랑의 법칙)

### 나쁜 코드로 치르는 대가

#### 원대한 재설계의 꿈
- 개발 속도를 크게 떨어뜨린다
- 팀 생산성이 떨어진다 > 인력 추가 투입 > 새 인력은 기존 시스템에 대한 설계에 조예가 깊지 않다 > 악순환의 반복
- 시간을 들여 꺠끗한 코드를 만드는 노력이 비용 절감 뿐만 아니라 전문가로서 살아남는 길이다

#### 태도

- 일정에 쫓기더라도 대다수 관리자는 좋은 코드를 원한다
- 나쁜 코드의 위험을 이해하지 못하는 관리자 말을 그대로 따르는 행동은 프로그래머답지 못하다

#### 원초적 난재

- 기한을 맞추려면 나쁜 코드를 양산할 수밖에 없다고 느낀다
- 진짜 전문가는 그것이 틀렸다는 사실을 잘 안다. 나쁜 코드를 양산하면 기한을 맞추지 못한다
- 기한을 맞추는 유일한 방법은 언제나 코드를 최대한 깨끗하게 유지하는 습관이다

#### 깨끗한 코드라는 예술?

- 깨끗한 코드와 나쁜 코드를 구분할 줄 안다고 깨끗한 코드를 작성할 줄 안다는 뜻은 아니다
- 깨끗한 코드를 작성하려면 자잘한 기법들을 적용하는 절제와 규율, 그리고 '코드 감각'이 필요하다
- '코드 감각'이 있는 프로그래머는 나쁜 모듈을 보면 좋은 모듈로 개선할 방안을 떠올리고, 최고 방안을 선택하여 거기까지 이동하는 경로를 계획한다

#### 깨끗한 코드란?

- 논리가 간단해야 버그가 숨어들지 못한다
- 의존성을 최대한 줄여야 유지보수가 쉬워진다
- 성능을 최적으로 유지해야한다
- 깨끗한 코드는 한 가지를 제대로 한다
- 깨끗한 코드는 설계자의 의도를 숨기지 않는다. 오히려 명쾌한 추상화와 단순한 제어문으로 가득하다
- 작성자가 아닌 사람도 읽기 쉽고 고치기 쉽다
- 단위 테스트 케이스와 인수 테스트 케이스가 존재한다
- 깨끗한 코드에는 의미 있는 이름이 붙는다
- 모두를 아우르는 특징이 하나 있다. 언제나 누군가 주의 깊게 짰다는 느낌을 준다
- 중복을 피하라. 한 기능만 수행하라. 제대로 표현하라. 작게 추상화하라
- 코드가 그 문제를 풀기 위한 언어처럼 보인다면 아름다운 코드이다

## Chapter 2. 의미 있는 이름

### 의도를 분명히 밝혀라

- 좋은 이름을 지으려면 시간이 걸리지만 좋은 이름으로 절약하는 시간이 훨씬 더 많다
- 의도가 드러나는 이름을 사용하면 코드 이해와 변경이 쉬워진다

### 그릇된 정보를 피하라

- 실제 데이터가 List가 아닌데 List로 이름을 짓는다면, 프로그래머에게 그릇된 정보를 제공하는 것이다
- 유사한 개념은 유사한 표기법을 사용한다. 일관성이 떨어지는 표기법은 그릇된 정보다.

### 의미 있게 구분하라

- 읽는 사람이 차이를 알도록 이름을 지어라

### 발음하기 쉬운 이름을 사용하라

- 발음하기 어려운 이름은 토론하기도 어렵다

### 검색하기 쉬운 이름을 사용하라

- a나 b, 1, 3 같은 한단어 보단 MAX_STUDENT_COUNT와 같이 검색이 쉬운 이름을 사용하라

### 인코딩을 피하라

### 자신의 기억력을 자랑하지 마라

### 클래스 이름

- 클래스 이름과 객체 이름은 명사나 명사구가 적당

### 메서드 이름

- 메서드 이름은 동사나 동사구가 적당

### 기발한 이름은 피하라

- 재미나거나 기발한 이름보단 명료한 이름을 선택하라

### 한 개념에 한 단어를 사용하라

- INSERT, ADD, APPEND, PUT 등등 같은 개념에 여러 단어를 사용하면 읽는 입장에선 다 다른 뜻으로 받아들일 수 있다.

### 말장난을 하지 마라

- 한 단어를 두 가지 목적으로 사용하지 마라

### 해법 영역에서 가져온 이름을 사용하라

- 모든 이름을 도메인에서 가져오기 보단 해당 개념에 맞는 이름이 가장 적합한 선택이다

### 문제 영역에서 가져온 이름을 상요하라

- 우수한 프로그래머와 설계자라면 해법 영역과 문제 영역을 구분할 줄 알아야 한다

### 의미 있는 맥락을 추가하라

- 주소 테이블에서 주소 상태값을 표현해주기 위해 단순히 `state`라는 단어만 쓰기 보다는, `addrState`와 같이 써주면 맥락상 더 의미 있게 될 수 있다

### 불필요한 맥락을 없애라



> 

